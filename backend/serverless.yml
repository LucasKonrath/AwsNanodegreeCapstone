service: capstone-posts-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation  

custom:
  documentation:
    api:
      info:
        version: v0.0.0
        title: Some API title
        description: Some API description
    models:
      - name: CreatePostModel
        contentType: application/json
        schema: ${file(models/create-post-model.json)} # reference to your model's json schema file. You can also declare the model inline.
provider:
  name: aws
  runtime: nodejs12.x  
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    COMMENTS_TABLE: Comments-${self:provider.stage}
    COMMENTS_BY_USER_INDEX: CommentsByUserIndex
    COMMENTS_BY_POST_INDEX: CommentsByPostIndex        
    POSTS_TABLE: Posts-${self:provider.stage}
    POSTS_CREATED_AT_INDEX: CreatedAtIndex
    POSTS_BY_USER_INDEX: PostsByUserIndex      
    ATTACHMENTS_S3_BUCKET: capstone-dama-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_JWKS_URL: https://dev-zx-ojbav.us.auth0.com/.well-known/jwks.json

  logs:
    # Enable API Gateway logs
    restApi: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getPosts.handler
    events:
      - http:
          method: get
          path: posts
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}/index/${self:provider.environment.POSTS_BY_USER_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetCommentsPost:
    handler: src/lambda/http/getCommentsPost.handler
    events:
      - http:
          method: get
          cors: true
          auth: Auth
          path: comments/{postId}          
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}/index/${self:provider.environment.COMMENTS_BY_POST_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createPost.handler
    events:
      - http:
          method: post
          path: posts
          cors: true
          auth: Auth
          documentation:
            requestModels:
              application/json: CreatePostModel
          reqValidatorName: onlyBody               
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CommentPost:
    handler: src/lambda/http/commentPost.handler
    events:
      - http:
          method: post
          path: comment
          cors: true
          auth: Auth    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  ClosePost:
    handler: src/lambda/http/closePost.handler
    events:
      - http:
          method: put
          path: post/close/{commentId}
          cors: true
          auth: Auth    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem              
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMMENTS_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem  
          - dynamodb:UpdateItem                   
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deletePost.handler
    events:
      - http:
          method: delete
          path: posts/{postId}
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: posts/{postId}/attachment
          cors: true
          auth: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - dynamodb:GetItem
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:
    # API Gateway
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    onlyBody:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true # true or false
        ValidateRequestParameters: false # true or false

    # DynamoDB
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: upvotes
            AttributeType: S
          - AttributeName: comments
            AttributeType: S
          - AttributeName: title
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: description
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.POSTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.POSTS_BY_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: postId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S     
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.COMMENTS_BY_POST_INDEX}
            KeySchema:
              - AttributeName: postId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.COMMENTS_BY_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket